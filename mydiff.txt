diff --git a/api/encoding/call.go b/api/encoding/call.go
index 9f115c75..04179779 100644
--- a/api/encoding/call.go
+++ b/api/encoding/call.go
@@ -149,3 +149,11 @@ func (c *Call) RoutingDelegate() string {
 	}
 	return c.md.RoutingDelegate()
 }
+
+// CallerProcedure returns the name of the procedure from the service making this request.
+func (c *Call) CallerProcedure() string {
+	if c == nil {
+		return ""
+	}
+	return c.md.CallerProcedure()
+}
diff --git a/api/encoding/call_test.go b/api/encoding/call_test.go
index 7b25d0a1..abc67100 100644
--- a/api/encoding/call_test.go
+++ b/api/encoding/call_test.go
@@ -41,6 +41,7 @@ func TestNilCall(t *testing.T) {
 	assert.Equal(t, "", call.ShardKey())
 	assert.Equal(t, "", call.RoutingKey())
 	assert.Equal(t, "", call.RoutingDelegate())
+	assert.Equal(t, "", call.CallerProcedure())
 	assert.Equal(t, "", call.Header("foo"))
 	assert.Empty(t, call.HeaderNames())
 
@@ -58,6 +59,7 @@ func TestReadFromRequest(t *testing.T) {
 		ShardKey:        "sk",
 		RoutingKey:      "rk",
 		RoutingDelegate: "rd",
+		CallerProcedure: "cp",
 		Headers:         transport.NewHeaders().With("foo", "bar"),
 	})
 	call := CallFromContext(ctx)
@@ -72,6 +74,7 @@ func TestReadFromRequest(t *testing.T) {
 	assert.Equal(t, "rk", call.RoutingKey())
 	assert.Equal(t, "rd", call.RoutingDelegate())
 	assert.Equal(t, "bar", call.Header("foo"))
+	assert.Equal(t, "cp", call.CallerProcedure())
 	assert.Len(t, call.HeaderNames(), 1)
 
 	assert.NoError(t, call.WriteResponseHeader("foo2", "bar2"))
@@ -90,6 +93,7 @@ func TestReadFromRequestMeta(t *testing.T) {
 		ShardKey:        "sk",
 		RoutingKey:      "rk",
 		RoutingDelegate: "rd",
+		CallerProcedure: "cp",
 		Headers:         transport.NewHeaders().With("foo", "bar"),
 	})
 	call := CallFromContext(ctx)
@@ -103,6 +107,7 @@ func TestReadFromRequestMeta(t *testing.T) {
 	assert.Equal(t, "sk", call.ShardKey())
 	assert.Equal(t, "rk", call.RoutingKey())
 	assert.Equal(t, "rd", call.RoutingDelegate())
+	assert.Equal(t, "cp", call.CallerProcedure())
 	assert.Equal(t, "bar", call.Header("foo"))
 	assert.Len(t, call.HeaderNames(), 1)
 
@@ -122,6 +127,7 @@ func TestDisabledResponseHeaders(t *testing.T) {
 		ShardKey:        "sk",
 		RoutingKey:      "rk",
 		RoutingDelegate: "rd",
+		CallerProcedure: "cp",
 		Headers:         transport.NewHeaders().With("foo", "bar"),
 	})
 	call := CallFromContext(ctx)
@@ -135,6 +141,7 @@ func TestDisabledResponseHeaders(t *testing.T) {
 	assert.Equal(t, "sk", call.ShardKey())
 	assert.Equal(t, "rk", call.RoutingKey())
 	assert.Equal(t, "rd", call.RoutingDelegate())
+	assert.Equal(t, "cp", call.CallerProcedure())
 	assert.Equal(t, "bar", call.Header("foo"))
 	assert.Len(t, call.HeaderNames(), 1)
 
diff --git a/api/encoding/inbound_call.go b/api/encoding/inbound_call.go
index 2fa2a6d1..4160d293 100644
--- a/api/encoding/inbound_call.go
+++ b/api/encoding/inbound_call.go
@@ -153,6 +153,10 @@ func (ic *inboundCallMetadata) RoutingDelegate() string {
 	return ic.req.RoutingDelegate
 }
 
+func (ic *inboundCallMetadata) CallerProcedure() string {
+	return ic.req.CallerProcedure
+}
+
 func (ic *inboundCallMetadata) WriteResponseHeader(k, v string) error {
 	if ic.disableResponseHeaders {
 		return yarpcerrors.InvalidArgumentErrorf("call does not support setting response headers")
diff --git a/api/encoding/inbound_call_test.go b/api/encoding/inbound_call_test.go
index 139428bf..3ee27c6b 100644
--- a/api/encoding/inbound_call_test.go
+++ b/api/encoding/inbound_call_test.go
@@ -46,6 +46,7 @@ func TestInboundCallReadFromRequest(t *testing.T) {
 		ShardKey:        "shardKey",
 		RoutingKey:      "routingKey",
 		RoutingDelegate: "routingDelegate",
+		CallerProcedure: "callerProcedure",
 	})
 	require.NoError(t, err)
 
@@ -57,7 +58,7 @@ func TestInboundCallReadFromRequest(t *testing.T) {
 	assert.Equal(t, "shardKey", call.ShardKey())
 	assert.Equal(t, "routingKey", call.RoutingKey())
 	assert.Equal(t, "routingDelegate", call.RoutingDelegate())
-
+	assert.Equal(t, "callerProcedure", call.CallerProcedure())
 	assert.Equal(t, "World", call.Header("Hello"))
 	assert.Equal(t, "bar", call.Header("FOO"))
 	assert.Equal(t, "true", call.Header("success"))
diff --git a/api/transport/request.go b/api/transport/request.go
index 7d6dfd10..bde2a959 100644
--- a/api/transport/request.go
+++ b/api/transport/request.go
@@ -64,6 +64,9 @@ type Request struct {
 	// override the routing key and service.
 	RoutingDelegate string
 
+	// CallerProcedure refers to the name of the rpc procedure from the service making this request
+	CallerProcedure string
+
 	// Request payload.
 	Body io.Reader
 
@@ -86,6 +89,7 @@ func (r *Request) ToRequestMeta() *RequestMeta {
 		ShardKey:        r.ShardKey,
 		RoutingKey:      r.RoutingKey,
 		RoutingDelegate: r.RoutingDelegate,
+		CallerProcedure: r.CallerProcedure,
 	}
 }
 
@@ -100,6 +104,7 @@ func (r *Request) MarshalLogObject(enc zapcore.ObjectEncoder) error {
 	enc.AddString("shardKey", r.ShardKey)
 	enc.AddString("routingKey", r.RoutingKey)
 	enc.AddString("routingDelegate", r.RoutingDelegate)
+	enc.AddString("callerProcedure", r.CallerProcedure)
 	return nil
 }
 
@@ -190,6 +195,9 @@ type RequestMeta struct {
 	// for the destined service for routing purposes. The routing delegate may
 	// override the routing key and service.
 	RoutingDelegate string
+
+	// CallerProcedure refers to the name of the rpc procedure of the service making this request
+	CallerProcedure string
 }
 
 // ToRequest converts a RequestMeta into a Request.
@@ -207,5 +215,6 @@ func (r *RequestMeta) ToRequest() *Request {
 		ShardKey:        r.ShardKey,
 		RoutingKey:      r.RoutingKey,
 		RoutingDelegate: r.RoutingDelegate,
+		CallerProcedure: r.CallerProcedure,
 	}
 }
diff --git a/api/transport/request_test.go b/api/transport/request_test.go
index 17050001..6efd1da7 100644
--- a/api/transport/request_test.go
+++ b/api/transport/request_test.go
@@ -136,6 +136,7 @@ func TestRequestLogMarshaling(t *testing.T) {
 		ShardKey:        "shard01",
 		RoutingKey:      "routing-key",
 		RoutingDelegate: "routing-delegate",
+		CallerProcedure: "caller-procedure",
 		Body:            strings.NewReader("body"),
 	}
 	enc := zapcore.NewMapObjectEncoder()
@@ -149,6 +150,7 @@ func TestRequestLogMarshaling(t *testing.T) {
 		"shardKey":        "shard01",
 		"routingKey":      "routing-key",
 		"routingDelegate": "routing-delegate",
+		"callerProcedure": "caller-procedure",
 	}, enc.Fields, "Unexpected output after marshaling request.")
 }
 
@@ -163,6 +165,7 @@ func TestRequestMetaToRequestConversionAndBack(t *testing.T) {
 		ShardKey:        "shard",
 		RoutingKey:      "rk",
 		RoutingDelegate: "rd",
+		CallerProcedure: "cp",
 	}
 
 	req := reqMeta.ToRequest()
diff --git a/call.go b/call.go
index dcf4363a..208abb76 100644
--- a/call.go
+++ b/call.go
@@ -166,6 +166,11 @@ func (c *Call) RoutingDelegate() string {
 	return (*encoding.Call)(c).RoutingDelegate()
 }
 
+// CallerProcedure returns the name of the procedure from the service making this request.
+func (c *Call) CallerProcedure() string {
+	return (*encoding.Call)(c).CallerProcedure()
+}
+
 // StreamOption defines options that may be passed in at streaming function
 // call sites.
 //
diff --git a/call_test.go b/call_test.go
index c0e6cb49..c39c9957 100644
--- a/call_test.go
+++ b/call_test.go
@@ -62,6 +62,7 @@ func TestCallFromContext(t *testing.T) {
 			ShardKey:        "one",
 			RoutingKey:      "two",
 			RoutingDelegate: "three",
+			CallerProcedure: "four",
 		},
 	)
 	assert.NoError(t, err)
@@ -76,4 +77,5 @@ func TestCallFromContext(t *testing.T) {
 	assert.Equal(t, "one", call.ShardKey())
 	assert.Equal(t, "two", call.RoutingKey())
 	assert.Equal(t, "three", call.RoutingDelegate())
+	assert.Equal(t, "four", call.CallerProcedure())
 }
diff --git a/encoding/protobuf/observability_test.go b/encoding/protobuf/observability_test.go
index 40788a13..0aac8b5d 100644
--- a/encoding/protobuf/observability_test.go
+++ b/encoding/protobuf/observability_test.go
@@ -22,7 +22,6 @@ package protobuf_test
 
 import (
 	"context"
-	"net"
 	"testing"
 	"time"
 
@@ -30,30 +29,17 @@ import (
 	"github.com/gogo/protobuf/types"
 	"github.com/stretchr/testify/assert"
 	"github.com/stretchr/testify/require"
-	"go.uber.org/net/metrics"
-	"go.uber.org/yarpc"
-	"go.uber.org/yarpc/api/transport"
 	"go.uber.org/yarpc/encoding/protobuf"
 	"go.uber.org/yarpc/encoding/protobuf/internal/testpb"
 	"go.uber.org/yarpc/internal/testutils"
-	"go.uber.org/yarpc/transport/grpc"
 	"go.uber.org/yarpc/yarpcerrors"
+	"go.uber.org/yarpc/yarpctest"
 	"go.uber.org/zap"
 	"go.uber.org/zap/zapcore"
-	"go.uber.org/zap/zaptest/observer"
-)
-
-const (
-	_clientName = "caller"
-	_serverName = "callee"
-
-	// from observability middleware
-	_errorInbound  = "Error handling inbound request."
-	_errorOutbound = "Error making outbound call."
 )
 
 func TestProtobufErrorDetailObservability(t *testing.T) {
-	client, observedLogs, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t)
+	client, observedLogs, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, &observabilityTestServer{})
 	defer cleanup()
 
 	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
@@ -95,10 +81,11 @@ func TestProtobufErrorDetailObservability(t *testing.T) {
 }
 
 func TestProtobufMetrics(t *testing.T) {
-	client, _, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t)
+	client, _, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, &observabilityTestServer{})
 	defer cleanup()
 
 	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+	ctx = yarpctest.ContextWithCall(ctx, &yarpctest.Call{Procedure: "ABC"})
 	defer cancel()
 
 	_, err := client.Unary(ctx, &testpb.TestMessage{Value: "success"})
@@ -129,7 +116,7 @@ func TestProtobufMetrics(t *testing.T) {
 }
 
 func TestProtobufStreamMetrics(t *testing.T) {
-	client, _, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t)
+	client, _, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, &observabilityTestServer{})
 	defer cleanup()
 
 	ctx, cancel := context.WithTimeout(context.Background(), time.Hour)
@@ -188,97 +175,6 @@ func TestProtobufStreamMetrics(t *testing.T) {
 	})
 }
 
-func assertLogs(t *testing.T, wantFields []zapcore.Field, logs []observer.LoggedEntry) {
-	require.Len(t, logs, 2, "unexpected number of logs")
-
-	t.Run("inbound", func(t *testing.T) {
-		require.Equal(t, _errorInbound, logs[0].Message, "unexpected log")
-		assertLogFields(t, wantFields, logs[0].Context)
-	})
-
-	t.Run("outbound", func(t *testing.T) {
-		require.Equal(t, _errorOutbound, logs[1].Message, "unexpected log")
-		assertLogFields(t, wantFields, logs[1].Context)
-	})
-}
-
-func assertLogFields(t *testing.T, wantFields, gotContext []zapcore.Field) {
-	gotFields := make(map[string]zapcore.Field)
-	for _, log := range gotContext {
-		gotFields[log.Key] = log
-	}
-
-	for _, want := range wantFields {
-		got, ok := gotFields[want.Key]
-		if assert.True(t, ok, "key %q not found", want.Key) {
-			assert.Equal(t, want, got, "unexpected log field")
-		}
-	}
-}
-
-func initClientAndServer(t *testing.T) (
-	client testpb.TestYARPCClient,
-	observedLogs *observer.ObservedLogs,
-	clientMetricsRoot *metrics.Root,
-	serverMetricsRoot *metrics.Root,
-	cleanup func(),
-) {
-	loggerCore, observedLogs := observer.New(zapcore.DebugLevel)
-	clientMetricsRoot, serverMetricsRoot = metrics.New(), metrics.New()
-
-	serverAddr, cleanupServer := newServer(t, loggerCore, serverMetricsRoot)
-	client, cleanupClient := newClient(t, serverAddr, loggerCore, clientMetricsRoot)
-
-	_ = observedLogs.TakeAll() // ignore all start up logs
-
-	return client, observedLogs, clientMetricsRoot, serverMetricsRoot, func() {
-		cleanupServer()
-		cleanupClient()
-	}
-}
-
-func newServer(t *testing.T, loggerCore zapcore.Core, metricsRoot *metrics.Root) (addr string, cleanup func()) {
-	listener, err := net.Listen("tcp", "127.0.0.1:0")
-	require.NoError(t, err)
-
-	inbound := grpc.NewTransport().NewInbound(listener)
-	dispatcher := yarpc.NewDispatcher(yarpc.Config{
-		Name:     _serverName,
-		Inbounds: yarpc.Inbounds{inbound},
-		Logging:  yarpc.LoggingConfig{Zap: zap.New(loggerCore)},
-		Metrics:  yarpc.MetricsConfig{Metrics: metricsRoot.Scope()},
-	})
-
-	dispatcher.Register(testpb.BuildTestYARPCProcedures(&observabilityTestServer{}))
-	require.NoError(t, dispatcher.Start(), "could not start server dispatcher")
-
-	addr = inbound.Addr().String()
-	cleanup = func() { assert.NoError(t, dispatcher.Stop(), "could not stop dispatcher") }
-	return addr, cleanup
-}
-
-func newClient(t *testing.T, serverAddr string, loggerCore zapcore.Core, metricsRoot *metrics.Root) (client testpb.TestYARPCClient, cleanup func()) {
-	outbound := grpc.NewTransport().NewSingleOutbound(serverAddr)
-	dispatcher := yarpc.NewDispatcher(yarpc.Config{
-		Name: _clientName,
-		Outbounds: map[string]transport.Outbounds{
-			_serverName: {
-				ServiceName: _serverName,
-				Unary:       outbound,
-				Stream:      outbound,
-			},
-		},
-		Logging: yarpc.LoggingConfig{Zap: zap.New(loggerCore)},
-		Metrics: yarpc.MetricsConfig{Metrics: metricsRoot.Scope()},
-	})
-
-	client = testpb.NewTestYARPCClient(dispatcher.ClientConfig(_serverName))
-	require.NoError(t, dispatcher.Start(), "could not start client dispatcher")
-
-	cleanup = func() { assert.NoError(t, dispatcher.Stop(), "could not stop dispatcher") }
-	return client, cleanup
-}
-
 type observabilityTestServer struct{}
 
 func (observabilityTestServer) Unary(ctx context.Context, msg *testpb.TestMessage) (*testpb.TestMessage, error) {
diff --git a/encoding/thrift/observability_test.go b/encoding/thrift/observability_test.go
index db8ff099..86d79194 100644
--- a/encoding/thrift/observability_test.go
+++ b/encoding/thrift/observability_test.go
@@ -22,24 +22,18 @@ package thrift_test
 
 import (
 	"context"
-	"net"
 	"testing"
 	"time"
 
 	"github.com/stretchr/testify/assert"
 	"github.com/stretchr/testify/require"
-	"go.uber.org/net/metrics"
-	"go.uber.org/yarpc"
-	"go.uber.org/yarpc/api/transport"
 	"go.uber.org/yarpc/encoding/thrift/internal/observabilitytest/test"
-	"go.uber.org/yarpc/encoding/thrift/internal/observabilitytest/test/testserviceclient"
-	"go.uber.org/yarpc/encoding/thrift/internal/observabilitytest/test/testserviceserver"
 	"go.uber.org/yarpc/internal/testutils"
 	"go.uber.org/yarpc/transport/http"
 	"go.uber.org/yarpc/transport/tchannel"
+	"go.uber.org/yarpc/yarpctest"
 	"go.uber.org/zap"
 	"go.uber.org/zap/zapcore"
-	"go.uber.org/zap/zaptest/observer"
 )
 
 const (
@@ -60,7 +54,7 @@ func TestThriftExceptionObservability(t *testing.T) {
 
 	for _, trans := range transports {
 		t.Run("exception with annotation", func(t *testing.T) {
-			client, observedLogs, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, trans)
+			client, observedLogs, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, trans, testServer{})
 			defer cleanup()
 
 			ctx, cancel := context.WithTimeout(context.Background(), time.Second)
@@ -105,7 +99,7 @@ func TestThriftExceptionObservability(t *testing.T) {
 		})
 
 		t.Run("exception without annotation ", func(t *testing.T) {
-			client, observedLogs, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, trans)
+			client, observedLogs, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, trans, testServer{})
 			defer cleanup()
 
 			ctx, cancel := context.WithTimeout(context.Background(), time.Second)
@@ -153,10 +147,13 @@ func TestThriftMetrics(t *testing.T) {
 
 	for _, trans := range transports {
 		t.Run(trans+" thift call", func(t *testing.T) {
-			client, _, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, trans)
+			client, _, clientMetricsRoot, serverMetricsRoot, cleanup := initClientAndServer(t, trans, testServer{})
 			defer cleanup()
 
 			ctx, cancel := context.WithTimeout(context.Background(), time.Second)
+			ctx = yarpctest.ContextWithCall(ctx, &yarpctest.Call{
+				Procedure: "ABC1",
+			})
 			defer cancel()
 
 			_, err := client.Call(ctx, _wantSuccess)
@@ -186,137 +183,6 @@ func TestThriftMetrics(t *testing.T) {
 	}
 }
 
-func assertLogs(t *testing.T, wantFields []zapcore.Field, logs []observer.LoggedEntry) {
-	require.Len(t, logs, 2, "unexpected number of logs")
-
-	t.Run("inbound", func(t *testing.T) {
-		require.Equal(t, _errorInbound, logs[0].Message, "unexpected log")
-		assertLogFields(t, wantFields, logs[0].Context)
-	})
-
-	t.Run("outbound", func(t *testing.T) {
-		require.Equal(t, _errorOutbound, logs[1].Message, "unexpected log")
-		assertLogFields(t, wantFields, logs[1].Context)
-	})
-}
-
-func assertLogFields(t *testing.T, wantFields, gotContext []zapcore.Field) {
-	gotFields := make(map[string]zapcore.Field)
-	for _, log := range gotContext {
-		gotFields[log.Key] = log
-	}
-
-	for _, want := range wantFields {
-		got, ok := gotFields[want.Key]
-		if assert.True(t, ok, "key %q not found", want.Key) {
-			assert.Equal(t, want, got, "unexpected log field")
-		}
-	}
-}
-
-func initClientAndServer(
-	t *testing.T,
-	trans string,
-) (
-	client testserviceclient.Interface,
-	observedLogs *observer.ObservedLogs,
-	clientMetricsRoot *metrics.Root,
-	serverMetricsRoot *metrics.Root,
-	cleanup func(),
-) {
-	loggerCore, observedLogs := observer.New(zapcore.DebugLevel)
-	clientMetricsRoot, serverMetricsRoot = metrics.New(), metrics.New()
-
-	serverAddr, cleanupServer := newServer(t, trans, loggerCore, serverMetricsRoot)
-	client, cleanupClient := newClient(t, trans, serverAddr, loggerCore, clientMetricsRoot)
-
-	_ = observedLogs.TakeAll() // ignore all start up logs
-
-	return client, observedLogs, clientMetricsRoot, serverMetricsRoot, func() {
-		cleanupServer()
-		cleanupClient()
-	}
-}
-
-func newServer(t *testing.T, transportType string, loggerCore zapcore.Core, metricsRoot *metrics.Root) (addr string, cleanup func()) {
-	var inbound transport.Inbound
-
-	switch transportType {
-	case tchannel.TransportName:
-		listen, err := net.Listen("tcp", "127.0.0.1:0")
-		require.NoError(t, err)
-
-		trans, err := tchannel.NewTransport(
-			tchannel.ServiceName(_serverName),
-			tchannel.Listener(listen))
-		require.NoError(t, err)
-
-		inbound = trans.NewInbound()
-		addr = listen.Addr().String()
-
-	case http.TransportName:
-		hInbound := http.NewTransport().NewInbound("127.0.0.1:0")
-		defer func() { addr = "http://" + hInbound.Addr().String() }() // can only get addr after dispatcher has started
-		inbound = hInbound
-
-	default:
-		t.Fatal("unknown transport")
-	}
-
-	dispatcher := yarpc.NewDispatcher(yarpc.Config{
-		Name:     _serverName,
-		Inbounds: yarpc.Inbounds{inbound},
-		Logging: yarpc.LoggingConfig{
-			Zap: zap.New(loggerCore),
-		},
-		Metrics: yarpc.MetricsConfig{
-			Metrics: metricsRoot.Scope(),
-		},
-	})
-
-	dispatcher.Register(testserviceserver.New(&testServer{}))
-	require.NoError(t, dispatcher.Start(), "could not start server dispatcher")
-
-	cleanup = func() { assert.NoError(t, dispatcher.Stop(), "could not stop dispatcher") }
-	return addr, cleanup
-}
-
-func newClient(t *testing.T, transportType string, serverAddr string, loggerCore zapcore.Core, metricsRoot *metrics.Root) (client testserviceclient.Interface, cleanup func()) {
-	var out transport.UnaryOutbound
-
-	switch transportType {
-	case tchannel.TransportName:
-		trans, err := tchannel.NewTransport(tchannel.ServiceName(_clientName))
-		require.NoError(t, err)
-		out = trans.NewSingleOutbound(serverAddr)
-
-	case http.TransportName:
-		out = http.NewTransport().NewSingleOutbound(serverAddr)
-	}
-
-	dispatcher := yarpc.NewDispatcher(yarpc.Config{
-		Name: _clientName,
-		Outbounds: map[string]transport.Outbounds{
-			_serverName: {
-				ServiceName: _serverName,
-				Unary:       out,
-			},
-		},
-		Logging: yarpc.LoggingConfig{
-			Zap: zap.New(loggerCore),
-		},
-		Metrics: yarpc.MetricsConfig{
-			Metrics: metricsRoot.Scope(),
-		},
-	})
-
-	client = testserviceclient.New(dispatcher.ClientConfig(_serverName))
-	require.NoError(t, dispatcher.Start(), "could not start client dispatcher")
-
-	cleanup = func() { assert.NoError(t, dispatcher.Stop(), "could not stop dispatcher") }
-	return client, cleanup
-}
-
 type testServer struct{}
 
 func (testServer) Call(ctx context.Context, val string) (string, error) {
diff --git a/internal/firstoutboundmiddleware/middleware.go b/internal/firstoutboundmiddleware/middleware.go
index 5006628b..ede544d6 100644
--- a/internal/firstoutboundmiddleware/middleware.go
+++ b/internal/firstoutboundmiddleware/middleware.go
@@ -26,6 +26,7 @@ package firstoutboundmiddleware
 import (
 	"context"
 
+	"go.uber.org/yarpc/api/encoding"
 	"go.uber.org/yarpc/api/middleware"
 	"go.uber.org/yarpc/api/transport"
 )
@@ -47,23 +48,23 @@ func New() *Middleware {
 
 // Call implements middleware.UnaryOutbound.
 func (m *Middleware) Call(ctx context.Context, req *transport.Request, next transport.UnaryOutbound) (*transport.Response, error) {
-	update(req, next)
+	update(ctx, req, next)
 	return next.Call(ctx, req)
 }
 
 // CallOneway implements middleware.OnewayOutbound.
 func (m *Middleware) CallOneway(ctx context.Context, req *transport.Request, next transport.OnewayOutbound) (transport.Ack, error) {
-	update(req, next)
+	update(ctx, req, next)
 	return next.CallOneway(ctx, req)
 }
 
 // CallStream implements middleware.StreamOutbound.
 func (m *Middleware) CallStream(ctx context.Context, req *transport.StreamRequest, next transport.StreamOutbound) (*transport.ClientStream, error) {
-	updateStream(req, next)
+	updateStream(ctx, req, next)
 	return next.CallStream(ctx, req)
 }
 
-func update(req *transport.Request, out transport.Outbound) {
+func update(ctx context.Context, req *transport.Request, out transport.Outbound) {
 	// TODO(apeatsbond): Setting environment headers and unique IDs should live
 	// here too (T1860945).
 
@@ -73,9 +74,14 @@ func update(req *transport.Request, out transport.Outbound) {
 	if namer, ok := out.(transport.Namer); ok {
 		req.Transport = namer.TransportName()
 	}
+
+	// Update the caller procedure to the current procedure making this request
+	call := encoding.CallFromContext(ctx)
+	req.CallerProcedure = call.Procedure()
+
 }
 
-func updateStream(req *transport.StreamRequest, out transport.Outbound) {
+func updateStream(ctx context.Context, req *transport.StreamRequest, out transport.Outbound) {
 	// TODO(apeatsbond): Setting environment headers and unique IDs should live
 	// here too (T1860945).
 
@@ -85,4 +91,8 @@ func updateStream(req *transport.StreamRequest, out transport.Outbound) {
 	if namer, ok := out.(transport.Namer); ok {
 		req.Meta.Transport = namer.TransportName()
 	}
+
+	// Update the caller procedure to the current procedure making this request
+	call := encoding.CallFromContext(ctx)
+	req.Meta.CallerProcedure = call.Procedure()
 }
diff --git a/internal/firstoutboundmiddleware/middleware_test.go b/internal/firstoutboundmiddleware/middleware_test.go
index 8c5489a9..8e0093da 100644
--- a/internal/firstoutboundmiddleware/middleware_test.go
+++ b/internal/firstoutboundmiddleware/middleware_test.go
@@ -46,32 +46,38 @@ func TestFirstOutboundMidleware(t *testing.T) {
 	)
 
 	t.Run("unary", func(t *testing.T) {
-		req := &transport.Request{Transport: "" /* not set */}
+		req := &transport.Request{Transport: "", CallerProcedure: "" /* not set */}
 
 		outWithMiddleware := middleware.ApplyUnaryOutbound(out, firstoutboundmiddleware.New())
-		_, err := outWithMiddleware.Call(context.Background(), req)
+		ctx := yarpctest.ContextWithCall(context.Background(), &yarpctest.Call{Transport: "", Procedure: "ABC"})
+		_, err := outWithMiddleware.Call(ctx, req)
 		require.NoError(t, err)
 
 		assert.Equal(t, "fake", string(req.Transport))
+		assert.Equal(t, "ABC", string(req.CallerProcedure))
 	})
 
 	t.Run("oneway", func(t *testing.T) {
 		req := &transport.Request{Transport: "" /* not set */}
 
 		outWithMiddleware := middleware.ApplyOnewayOutbound(out, firstoutboundmiddleware.New())
-		_, err := outWithMiddleware.CallOneway(context.Background(), req)
+		ctx := yarpctest.ContextWithCall(context.Background(), &yarpctest.Call{Transport: "", Procedure: "ABC"})
+		_, err := outWithMiddleware.CallOneway(ctx, req)
 		require.NoError(t, err)
 
 		assert.Equal(t, "fake", string(req.Transport))
+		assert.Equal(t, "ABC", string(req.CallerProcedure))
 	})
 
 	t.Run("stream", func(t *testing.T) {
 		streamReq := &transport.StreamRequest{Meta: &transport.RequestMeta{Transport: "" /* not set */}}
 
 		outWithMiddleware := middleware.ApplyStreamOutbound(out, firstoutboundmiddleware.New())
-		_, err := outWithMiddleware.CallStream(context.Background(), streamReq)
+		ctx := yarpctest.ContextWithCall(context.Background(), &yarpctest.Call{Transport: "", Procedure: "ABC"})
+		_, err := outWithMiddleware.CallStream(ctx, streamReq)
 		require.NoError(t, err)
 
 		assert.Equal(t, "fake", string(streamReq.Meta.Transport))
+		assert.Equal(t, "ABC", string(streamReq.Meta.CallerProcedure))
 	})
 }
diff --git a/internal/inboundcall/metadata.go b/internal/inboundcall/metadata.go
index 3e74b0ea..987df094 100644
--- a/internal/inboundcall/metadata.go
+++ b/internal/inboundcall/metadata.go
@@ -41,6 +41,7 @@ type Metadata interface {
 	ShardKey() string
 	RoutingKey() string
 	RoutingDelegate() string
+	CallerProcedure() string
 }
 
 type metadataKey struct{} // context key for Metadata
diff --git a/internal/observability/graph.go b/internal/observability/graph.go
index 8f4ae436..12c8a58b 100644
--- a/internal/observability/graph.go
+++ b/internal/observability/graph.go
@@ -95,6 +95,7 @@ func (g *graph) begin(ctx context.Context, rpcType transport.Type, direction dir
 	d.Add(req.Procedure)
 	d.Add(req.RoutingKey)
 	d.Add(req.RoutingDelegate)
+	d.Add(req.CallerProcedure)
 	d.Add(string(direction))
 	d.Add(rpcType.String())
 	e := g.getOrCreateEdge(d.Digest(), req, string(direction), rpcType)
@@ -195,6 +196,7 @@ func newEdge(logger *zap.Logger, meter *metrics.Scope, req *transport.Request, d
 		"encoding":         string(req.Encoding),
 		"routing_key":      req.RoutingKey,
 		"routing_delegate": req.RoutingDelegate,
+		"source_procedure": req.CallerProcedure,
 		"direction":        direction,
 		"rpc_type":         rpcType.String(),
 	}
@@ -463,6 +465,7 @@ func newEdge(logger *zap.Logger, meter *metrics.Scope, req *transport.Request, d
 		zap.String("encoding", string(req.Encoding)),
 		zap.String("routingKey", req.RoutingKey),
 		zap.String("routingDelegate", req.RoutingDelegate),
+		zap.String("sourceProcedure", req.CallerProcedure),
 		zap.String("direction", direction),
 	)
 	return &edge{
diff --git a/internal/observability/middleware_test.go b/internal/observability/middleware_test.go
index 740a983d..b984fa88 100644
--- a/internal/observability/middleware_test.go
+++ b/internal/observability/middleware_test.go
@@ -178,6 +178,7 @@ func TestMiddlewareLogging(t *testing.T) {
 		ShardKey:        "shard01",
 		RoutingKey:      "routing-key",
 		RoutingDelegate: "routing-delegate",
+		CallerProcedure: "caller-procedure",
 		Body:            strings.NewReader("body"),
 	}
 
@@ -196,6 +197,7 @@ func TestMiddlewareLogging(t *testing.T) {
 			zap.String("encoding", string(req.Encoding)),
 			zap.String("routingKey", req.RoutingKey),
 			zap.String("routingDelegate", req.RoutingDelegate),
+			zap.String("sourceProcedure", req.CallerProcedure),
 		}
 	}
 
@@ -501,6 +503,7 @@ func TestMiddlewareStreamingLogging(t *testing.T) {
 			ShardKey:        "shard-key",
 			RoutingKey:      "routing-key",
 			RoutingDelegate: "routing-delegate",
+			CallerProcedure: "caller-procedure",
 		},
 	}
 
@@ -514,6 +517,7 @@ func TestMiddlewareStreamingLogging(t *testing.T) {
 			zap.String("encoding", string(req.Meta.Encoding)),
 			zap.String("routingKey", req.Meta.RoutingKey),
 			zap.String("routingDelegate", req.Meta.RoutingDelegate),
+			zap.String("sourceProcedure", req.Meta.CallerProcedure),
 		}
 		return append(fields, extraFields...)
 	}
@@ -1197,6 +1201,7 @@ func getKey(req *transport.Request, direction string, rpcType transport.Type) (k
 	d.Add(req.Procedure)
 	d.Add(req.RoutingKey)
 	d.Add(req.RoutingDelegate)
+	d.Add(req.CallerProcedure)
 	d.Add(direction)
 	d.Add(rpcType.String())
 	return d.Digest(), d.Free
@@ -1216,6 +1221,7 @@ func TestUnaryInboundApplicationErrors(t *testing.T) {
 		ShardKey:        "shard01",
 		RoutingKey:      "routing-key",
 		RoutingDelegate: "routing-delegate",
+		CallerProcedure: "caller-procedure",
 		Body:            strings.NewReader("body"),
 	}
 
@@ -1227,6 +1233,7 @@ func TestUnaryInboundApplicationErrors(t *testing.T) {
 		zap.String("encoding", string(req.Encoding)),
 		zap.String("routingKey", req.RoutingKey),
 		zap.String("routingDelegate", req.RoutingDelegate),
+		zap.String("sourceProcedure", req.CallerProcedure),
 		zap.String("direction", string(_directionInbound)),
 		zap.String("rpcType", "Unary"),
 		zap.Duration("latency", 0),
@@ -1300,6 +1307,7 @@ func TestMiddlewareSuccessSnapshot(t *testing.T) {
 			ShardKey:        "sk",
 			RoutingKey:      "rk",
 			RoutingDelegate: "rd",
+			CallerProcedure: "cp",
 			Body:            buf,
 			BodySize:        buf.Len(),
 		},
@@ -1316,6 +1324,7 @@ func TestMiddlewareSuccessSnapshot(t *testing.T) {
 		"encoding":         "raw",
 		"procedure":        "procedure",
 		"routing_delegate": "rd",
+		"source_procedure": "cp",
 		"routing_key":      "rk",
 		"rpc_type":         transport.Unary.String(),
 		"source":           "caller",
@@ -1401,6 +1410,7 @@ func TestMiddlewareSuccessSnapshotForCall(t *testing.T) {
 			ShardKey:        "sk",
 			RoutingKey:      "rk",
 			RoutingDelegate: "rd",
+			CallerProcedure: "cp",
 			Body:            buf,
 			BodySize:        buf.Len(),
 		},
@@ -1416,6 +1426,7 @@ func TestMiddlewareSuccessSnapshotForCall(t *testing.T) {
 		"encoding":         "raw",
 		"procedure":        "procedure",
 		"routing_delegate": "rd",
+		"source_procedure": "cp",
 		"routing_key":      "rk",
 		"rpc_type":         transport.Unary.String(),
 		"source":           "caller",
@@ -1501,6 +1512,7 @@ func TestMiddlewareSuccessSnapshotForCallOnWay(t *testing.T) {
 			ShardKey:        "sk",
 			RoutingKey:      "rk",
 			RoutingDelegate: "rd",
+			CallerProcedure: "cp",
 			Body:            buf,
 			BodySize:        buf.Len(),
 		},
@@ -1516,6 +1528,7 @@ func TestMiddlewareSuccessSnapshotForCallOnWay(t *testing.T) {
 		"encoding":         "raw",
 		"procedure":        "procedure",
 		"routing_delegate": "rd",
+		"source_procedure": "cp",
 		"routing_key":      "rk",
 		"rpc_type":         transport.Oneway.String(),
 		"source":           "caller",
@@ -1600,6 +1613,7 @@ func TestMiddlewareSuccessSnapshotForOneWay(t *testing.T) {
 			ShardKey:        "sk",
 			RoutingKey:      "rk",
 			RoutingDelegate: "rd",
+			CallerProcedure: "cp",
 			Body:            buf,
 			BodySize:        buf.Len(),
 		},
@@ -1615,6 +1629,7 @@ func TestMiddlewareSuccessSnapshotForOneWay(t *testing.T) {
 		"encoding":         "raw",
 		"procedure":        "procedure",
 		"routing_delegate": "rd",
+		"source_procedure": "cp",
 		"routing_key":      "rk",
 		"rpc_type":         transport.Oneway.String(),
 		"source":           "caller",
@@ -1695,6 +1710,7 @@ func TestMiddlewareFailureSnapshot(t *testing.T) {
 			ShardKey:        "sk",
 			RoutingKey:      "rk",
 			RoutingDelegate: "rd",
+			CallerProcedure: "cp",
 			Body:            buf,
 			BodySize:        buf.Len(),
 		},
@@ -1710,6 +1726,7 @@ func TestMiddlewareFailureSnapshot(t *testing.T) {
 		"encoding":         "raw",
 		"procedure":        "procedure",
 		"routing_delegate": "rd",
+		"source_procedure": "cp",
 		"routing_key":      "rk",
 		"rpc_type":         transport.Unary.String(),
 		"source":           "caller",
@@ -1723,6 +1740,7 @@ func TestMiddlewareFailureSnapshot(t *testing.T) {
 		"error_name":       _notSet,
 		"procedure":        "procedure",
 		"routing_delegate": "rd",
+		"source_procedure": "cp",
 		"routing_key":      "rk",
 		"rpc_type":         transport.Unary.String(),
 		"source":           "caller",
@@ -1809,6 +1827,7 @@ func TestMiddlewareFailureWithDeadlineExceededSnapshot(t *testing.T) {
 			ShardKey:        "sk",
 			RoutingKey:      "rk",
 			RoutingDelegate: "rd",
+			CallerProcedure: "cp",
 			Body:            buf,
 			BodySize:        buf.Len(),
 		},
@@ -1828,6 +1847,7 @@ func TestMiddlewareFailureWithDeadlineExceededSnapshot(t *testing.T) {
 		"encoding":         "raw",
 		"procedure":        "procedure",
 		"routing_delegate": "rd",
+		"source_procedure": "cp",
 		"routing_key":      "rk",
 		"rpc_type":         transport.Unary.String(),
 		"source":           "caller",
@@ -1841,6 +1861,7 @@ func TestMiddlewareFailureWithDeadlineExceededSnapshot(t *testing.T) {
 		"error_name":       _notSet,
 		"procedure":        "procedure",
 		"routing_delegate": "rd",
+		"source_procedure": "cp",
 		"routing_key":      "rk",
 		"rpc_type":         transport.Unary.String(),
 		"source":           "caller",
@@ -1955,6 +1976,7 @@ func TestApplicationErrorSnapShot(t *testing.T) {
 					ShardKey:        "sk",
 					RoutingKey:      "rk",
 					RoutingDelegate: "rd",
+					CallerProcedure: "cp",
 				},
 				&transporttest.FakeResponseWriter{},
 				fakeHandler{
@@ -1973,6 +1995,7 @@ func TestApplicationErrorSnapShot(t *testing.T) {
 				"encoding":         "raw",
 				"procedure":        "procedure",
 				"routing_delegate": "rd",
+				"source_procedure": "cp",
 				"routing_key":      "rk",
 				"rpc_type":         transport.Unary.String(),
 				"source":           "caller",
@@ -1984,6 +2007,7 @@ func TestApplicationErrorSnapShot(t *testing.T) {
 				"encoding":         "raw",
 				"procedure":        "procedure",
 				"routing_delegate": "rd",
+				"source_procedure": "cp",
 				"routing_key":      "rk",
 				"rpc_type":         transport.Unary.String(),
 				"source":           "caller",
@@ -2059,6 +2083,7 @@ func TestUnaryInboundApplicationPanics(t *testing.T) {
 			"encoding":         "raw",
 			"procedure":        "procedure",
 			"routing_delegate": "rd",
+			"source_procedure": "cp",
 			"routing_key":      "rk",
 			"rpc_type":         transport.Unary.String(),
 			"source":           "caller",
@@ -2089,6 +2114,7 @@ func TestUnaryInboundApplicationPanics(t *testing.T) {
 					ShardKey:        "sk",
 					RoutingKey:      "rk",
 					RoutingDelegate: "rd",
+					CallerProcedure: "cp",
 				},
 				&transporttest.FakeResponseWriter{},
 				fakeHandler{applicationPanic: true},
@@ -2157,6 +2183,7 @@ func TestStreamingInboundApplicationPanics(t *testing.T) {
 				ShardKey:        "sk",
 				RoutingKey:      "rk",
 				RoutingDelegate: "rd",
+				CallerProcedure: "cp",
 			},
 		},
 	})
@@ -2169,6 +2196,7 @@ func TestStreamingInboundApplicationPanics(t *testing.T) {
 			"procedure":        "procedure",
 			"routing_delegate": "rd",
 			"routing_key":      "rk",
+			"source_procedure": "cp",
 			"rpc_type":         transport.Streaming.String(),
 			"source":           "caller",
 			"transport":        "unknown",
@@ -2227,6 +2255,7 @@ func TestStreamingMetrics(t *testing.T) {
 			ShardKey:        "sk",
 			RoutingKey:      "rk",
 			RoutingDelegate: "rd",
+			CallerProcedure: "cp",
 		},
 	}
 
@@ -2237,6 +2266,7 @@ func TestStreamingMetrics(t *testing.T) {
 			"encoding":         "raw",
 			"procedure":        "procedure",
 			"routing_delegate": "rd",
+			"source_procedure": "cp",
 			"routing_key":      "rk",
 			"rpc_type":         transport.Streaming.String(),
 			"source":           "caller",
diff --git a/transport/grpc/headers.go b/transport/grpc/headers.go
index d4b1e8be..2e9f8af3 100644
--- a/transport/grpc/headers.go
+++ b/transport/grpc/headers.go
@@ -34,6 +34,10 @@ const (
 	// request. This corresponds to the Request.Caller attribute.
 	// This header is required.
 	CallerHeader = "rpc-caller"
+	// CallerProcedureHeader is the header key for the name of the rpc procedure from the service sending the
+	// request. This corresponds to the Request.CallerProcedure attribute.
+	// This header is optional.
+	CallerProcedureHeader = "rpc-caller-procedure"
 	// ServiceHeader is the header key for the name of the service to which
 	// the request is being sent. This corresponds to the Request.Service attribute.
 	// This header is also used in responses to ensure requests are processed by the
@@ -103,6 +107,7 @@ func transportRequestToMetadata(request *transport.Request) (metadata.MD, error)
 		addToMetadata(md, RoutingKeyHeader, request.RoutingKey),
 		addToMetadata(md, RoutingDelegateHeader, request.RoutingDelegate),
 		addToMetadata(md, EncodingHeader, string(request.Encoding)),
+		addToMetadata(md, CallerProcedureHeader, request.CallerProcedure),
 	); err != nil {
 		return md, err
 	}
@@ -139,6 +144,8 @@ func metadataToTransportRequest(md metadata.MD) (*transport.Request, error) {
 			request.RoutingDelegate = value
 		case EncodingHeader:
 			request.Encoding = transport.Encoding(value)
+		case CallerProcedureHeader:
+			request.CallerProcedure = value
 		case contentTypeHeader:
 			// if request.Encoding was set, do not parse content-type
 			// this results in EncodingHeader overriding content-type
diff --git a/transport/grpc/headers_test.go b/transport/grpc/headers_test.go
index 25f2999f..02443d57 100644
--- a/transport/grpc/headers_test.go
+++ b/transport/grpc/headers_test.go
@@ -47,6 +47,7 @@ func TestMetadataToTransportRequest(t *testing.T) {
 				RoutingKeyHeader, "example-routing-key",
 				RoutingDelegateHeader, "example-routing-delegate",
 				EncodingHeader, "example-encoding",
+				CallerProcedureHeader, "example-caller-procedure",
 				"foo", "bar",
 				"baz", "bat",
 			),
@@ -57,6 +58,7 @@ func TestMetadataToTransportRequest(t *testing.T) {
 				RoutingKey:      "example-routing-key",
 				RoutingDelegate: "example-routing-delegate",
 				Encoding:        "example-encoding",
+				CallerProcedure: "example-caller-procedure",
 				Headers: transport.HeadersFromMap(map[string]string{
 					"foo": "bar",
 					"baz": "bat",
@@ -140,6 +142,7 @@ func TestTransportRequestToMetadata(t *testing.T) {
 				ShardKeyHeader, "example-shard-key",
 				RoutingKeyHeader, "example-routing-key",
 				RoutingDelegateHeader, "example-routing-delegate",
+				CallerProcedureHeader, "example-caller-procedure",
 				EncodingHeader, "example-encoding",
 				"foo", "bar",
 				"baz", "bat",
@@ -150,6 +153,7 @@ func TestTransportRequestToMetadata(t *testing.T) {
 				ShardKey:        "example-shard-key",
 				RoutingKey:      "example-routing-key",
 				RoutingDelegate: "example-routing-delegate",
+				CallerProcedure: "example-caller-procedure",
 				Encoding:        "example-encoding",
 				Headers: transport.HeadersFromMap(map[string]string{
 					"foo": "bar",
diff --git a/transport/http/constants.go b/transport/http/constants.go
index acc2634d..3dcaaae8 100644
--- a/transport/http/constants.go
+++ b/transport/http/constants.go
@@ -69,6 +69,10 @@ const (
 	// Request.RoutingDelegate attribute.
 	RoutingDelegateHeader = "Rpc-Routing-Delegate"
 
+	// CallerProcedureHeader is the header key for the name of the rpc procedure from the service sending the
+	// request. This corresponds to the Request.CallerProcedure attribute.
+	CallerProcedureHeader = "Rpc-Caller-Procedure"
+
 	// Whether the response body contains an application error.
 	ApplicationStatusHeader = "Rpc-Status"
 
diff --git a/transport/http/handler.go b/transport/http/handler.go
index a374c1ef..da3c3161 100644
--- a/transport/http/handler.go
+++ b/transport/http/handler.go
@@ -112,6 +112,7 @@ func (h handler) callHandler(responseWriter *responseWriter, req *http.Request,
 		ShardKey:        popHeader(req.Header, ShardKeyHeader),
 		RoutingKey:      popHeader(req.Header, RoutingKeyHeader),
 		RoutingDelegate: popHeader(req.Header, RoutingDelegateHeader),
+		CallerProcedure: popHeader(req.Header, CallerProcedureHeader),
 		Headers:         applicationHeaders.FromHTTPHeaders(req.Header, transport.Headers{}),
 		Body:            req.Body,
 		BodySize:        int(req.ContentLength),
diff --git a/transport/http/handler_test.go b/transport/http/handler_test.go
index cffccd82..cf2a06c9 100644
--- a/transport/http/handler_test.go
+++ b/transport/http/handler_test.go
@@ -57,6 +57,7 @@ func TestHandlerSuccess(t *testing.T) {
 	headers.Set(ShardKeyHeader, "shard")
 	headers.Set(RoutingKeyHeader, "routekey")
 	headers.Set(RoutingDelegateHeader, "routedelegate")
+	headers.Set(CallerProcedureHeader, "callerprocedure")
 
 	router := transporttest.NewMockRouter(mockCtrl)
 	rpcHandler := transporttest.NewMockUnaryHandler(mockCtrl)
@@ -81,6 +82,7 @@ func TestHandlerSuccess(t *testing.T) {
 				ShardKey:        "shard",
 				RoutingKey:      "routekey",
 				RoutingDelegate: "routedelegate",
+				CallerProcedure: "callerprocedure",
 				Body:            bytes.NewReader([]byte("Nyuck Nyuck")),
 			},
 		),
diff --git a/transport/http/outbound.go b/transport/http/outbound.go
index 4d6bedb9..ea1c9a26 100644
--- a/transport/http/outbound.go
+++ b/transport/http/outbound.go
@@ -402,6 +402,10 @@ func (o *Outbound) withCoreHeaders(req *http.Request, treq *transport.Request, t
 		req.Header.Set(RoutingDelegateHeader, treq.RoutingDelegate)
 	}
 
+	if treq.CallerProcedure != "" {
+		req.Header.Set(CallerProcedureHeader, treq.CallerProcedure)
+	}
+
 	encoding := string(treq.Encoding)
 	if encoding != "" {
 		req.Header.Set(EncodingHeader, encoding)
@@ -522,6 +526,7 @@ func (o *Outbound) roundTrip(hreq *http.Request, treq *transport.Request, start
 			ShardKey:        hreq.Header.Get(ShardKeyHeader),
 			RoutingKey:      hreq.Header.Get(RoutingKeyHeader),
 			RoutingDelegate: hreq.Header.Get(RoutingDelegateHeader),
+			CallerProcedure: hreq.Header.Get(CallerProcedureHeader),
 			Headers:         applicationHeaders.FromHTTPHeaders(hreq.Header, transport.Headers{}),
 		}
 	}
diff --git a/transport/http/outbound_test.go b/transport/http/outbound_test.go
index be159dc0..3b66e6cf 100644
--- a/transport/http/outbound_test.go
+++ b/transport/http/outbound_test.go
@@ -576,17 +576,20 @@ func TestWithCoreHeaders(t *testing.T) {
 	shardKey := "sharding"
 	routingKey := "routing"
 	routingDelegate := "delegate"
+	callerProcedure := "callerprocedure"
 
 	treq := &transport.Request{
 		ShardKey:        shardKey,
 		RoutingKey:      routingKey,
 		RoutingDelegate: routingDelegate,
+		CallerProcedure: callerProcedure,
 	}
 	result := out.withCoreHeaders(httpReq, treq, time.Second)
 
 	assert.Equal(t, shardKey, result.Header.Get(ShardKeyHeader))
 	assert.Equal(t, routingKey, result.Header.Get(RoutingKeyHeader))
 	assert.Equal(t, routingDelegate, result.Header.Get(RoutingDelegateHeader))
+	assert.Equal(t, callerProcedure, result.Header.Get(CallerProcedureHeader))
 }
 
 func TestNoRequest(t *testing.T) {
diff --git a/transport/tchannel/handler.go b/transport/tchannel/handler.go
index 65f67df1..08266866 100644
--- a/transport/tchannel/handler.go
+++ b/transport/tchannel/handler.go
@@ -49,6 +49,7 @@ type inboundCall interface {
 	ShardKey() string
 	RoutingKey() string
 	RoutingDelegate() string
+	CallerProcedure() string
 
 	Format() tchannel.Format
 
@@ -176,6 +177,7 @@ func (h handler) callHandler(ctx context.Context, call inboundCall, responseWrit
 		ShardKey:        call.ShardKey(),
 		RoutingKey:      call.RoutingKey(),
 		RoutingDelegate: call.RoutingDelegate(),
+		CallerProcedure: call.CallerProcedure(),
 	}
 
 	ctx, headers, err := readRequestHeaders(ctx, call.Format(), call.Arg2Reader)
diff --git a/transport/tchannel/handler_test.go b/transport/tchannel/handler_test.go
index 5b0be69b..f4a19245 100644
--- a/transport/tchannel/handler_test.go
+++ b/transport/tchannel/handler_test.go
@@ -133,6 +133,7 @@ func TestHandlerErrors(t *testing.T) {
 					ShardKey:        "shard",
 					RoutingKey:      "routekey",
 					RoutingDelegate: "routedelegate",
+					CallerProcedure: "callerprocedure",
 					Body:            bytes.NewReader([]byte("world")),
 				}),
 			gomock.Any(),
@@ -150,6 +151,7 @@ func TestHandlerErrors(t *testing.T) {
 			shardkey:        "shard",
 			routingkey:      "routekey",
 			routingdelegate: "routedelegate",
+			callerProcedure: "callerprocedure",
 			arg2:            tt.headers,
 			arg3:            []byte("world"),
 			resp:            respRecorder,
diff --git a/transport/tchannel/outbound.go b/transport/tchannel/outbound.go
index cc4fd740..76cab7f0 100644
--- a/transport/tchannel/outbound.go
+++ b/transport/tchannel/outbound.go
@@ -124,6 +124,7 @@ func callWithPeer(ctx context.Context, req *transport.Request, peer *tchannel.Pe
 		ShardKey:        req.ShardKey,
 		RoutingKey:      req.RoutingKey,
 		RoutingDelegate: req.RoutingDelegate,
+		CallerProcedure: req.CallerProcedure,
 	}
 
 	// If the hostport is given, we use the BeginCall on the channel
diff --git a/transport/tchannel/tchannel_utils_test.go b/transport/tchannel/tchannel_utils_test.go
index cd49afe3..65a01c2b 100644
--- a/transport/tchannel/tchannel_utils_test.go
+++ b/transport/tchannel/tchannel_utils_test.go
@@ -71,6 +71,7 @@ type fakeInboundCall struct {
 	shardkey        string
 	routingkey      string
 	routingdelegate string
+	callerProcedure string
 	format          tchannel.Format
 	arg2, arg3      []byte
 	resp            inboundCallResponse
@@ -82,6 +83,7 @@ func (i *fakeInboundCall) MethodString() string          { return i.method }
 func (i *fakeInboundCall) ShardKey() string              { return i.shardkey }
 func (i *fakeInboundCall) RoutingKey() string            { return i.routingkey }
 func (i *fakeInboundCall) RoutingDelegate() string       { return i.routingdelegate }
+func (i *fakeInboundCall) CallerProcedure() string       { return i.callerProcedure }
 func (i *fakeInboundCall) Format() tchannel.Format       { return i.format }
 func (i *fakeInboundCall) Response() inboundCallResponse { return i.resp }
 
diff --git a/yarpctest/context.go b/yarpctest/context.go
index 494a19a2..82bcbc6c 100644
--- a/yarpctest/context.go
+++ b/yarpctest/context.go
@@ -38,6 +38,7 @@ type Call struct {
 	ShardKey        string
 	RoutingKey      string
 	RoutingDelegate string
+	CallerProcedure string
 
 	// If set, this map will be filled with response headers written to
 	// yarpc.Call.
@@ -72,6 +73,7 @@ func (c callMetadata) Service() string              { return c.c.Service }
 func (c callMetadata) Transport() string            { return c.c.Transport }
 func (c callMetadata) Procedure() string            { return c.c.Procedure }
 func (c callMetadata) Encoding() transport.Encoding { return c.c.Encoding }
+func (c callMetadata) CallerProcedure() string      { return c.c.CallerProcedure }
 
 func (c callMetadata) Headers() transport.Headers {
 	return transport.HeadersFromMap(c.c.Headers)
diff --git a/yarpctest/context_test.go b/yarpctest/context_test.go
index a472ef13..e6e86ada 100644
--- a/yarpctest/context_test.go
+++ b/yarpctest/context_test.go
@@ -66,6 +66,7 @@ func TestContextWithCall(t *testing.T) {
 				RoutingKey:      "routingkey",
 				RoutingDelegate: "routingdelegate",
 				ResponseHeaders: tt.resHeaders,
+				CallerProcedure: "callerProcedure",
 			})
 			call := yarpc.CallFromContext(ctx)
 
@@ -79,6 +80,7 @@ func TestContextWithCall(t *testing.T) {
 			assert.Equal(t, "shardkey", call.ShardKey())
 			assert.Equal(t, "routingkey", call.RoutingKey())
 			assert.Equal(t, "routingdelegate", call.RoutingDelegate())
+			assert.Equal(t, "callerProcedure", call.CallerProcedure())
 
 			assert.NoError(t, call.WriteResponseHeader("baz", "qux"))
 			assert.Equal(t, tt.wantResHeaders, tt.resHeaders)
